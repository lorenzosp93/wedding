// Generated by https://quicktype.io
import type { GeoCoordinates, DateArray, EventStatus } from "ics";

export interface ListObject {
    uuid: string;
    content: null | string;
    subject: string;
    questions?: Question[];
    created_at?: string;
    option_pre?: string[];
    widget?: Widget[];
    type?: string;
    picture?: null | string;
    thumbnail?: null | string;
}

export interface Information extends ListObject {
    type: string;
    widget: Widget[];
    picture: null | string;
    thumbnail: null | string;
}

export interface Message extends ListObject {
    option_pre: string[];
    questions: Question[];
}

export interface Question {
    uuid: string;
    content: null | string;
    subject: string;
    options: OptionElement[];
    response: Response | null;
    multi_select: boolean;
    free_text: boolean;
    mandatory: boolean;
    message: string;
}

export interface OptionElement {
    uuid: string;
    content: string;
    question: string;
}

export interface Response {
    option: string[];
    text: string;
    uuid?: string;
    question?: string;
}
// Generated by https://quicktype.io

export interface Subscription {
    endpoint: string;
    keys: Keys;
}

export interface Keys {
    id?: number;
    p256dh: string;
    auth: string;
}


export interface Widget {
    type: WidgetType;
    content: Content;
}

export interface Content {
    start?: DateArray;
    duration?: Duration;
    location?: string;
    src?: string;
    address1?: string;
    address2?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    description?: string;
    geo?: GeoCoordinates;
    status?: EventStatus;
}


export interface Duration {
    hours: number;
    minutes?: number;
}

export enum WidgetType {
    calendar = 'calendar',
    maps = 'maps',
}

// Generated by https://quicktype.io

export interface Gallery {
    count: number;
    next: string | null;
    previous: string;
    results: Photo[];
}

export interface Photo {
    picture: string;
    thumbnail: string;
    content: null;
    id: number;
}

interface ResponseError {
    option: string[];
    text: string[];
    non_field_errors: string[];
};

export type ResponseErrors = {
    q: string,
    e: ResponseError,
};
